# Corrections
## by AK
You should really take another look at Markdown. It's really nifty, if you use
it carefully (e.g. don't do crazy stuff in the alternative text of pictures).
but you used the Debugger successfully and described coding conventions.
Speaking of which: `counter++` instead of `++counter` is not a good convention,
as it seems rather random, maybe you could call it "don't try to squeeze as
much code as possible on one line"

You pass problemset06
#Our hypothesises on why tests fail.

## Hypothesis 1: The code won't compile.
* Verification:
 	* Code does compile: ![code compiles](img/no-compile-errors.png).
* Explanation: 
	* The code is valid Java.

## Hypothesis 2: The 'get' method does not work properly.
* Verification:
 	The test 'shouldFindNumberAtFirstIndexAfterAdd' fails:  
![test fails](img/p1.png).

* Explanation: 
	The 'for'-loop lets the current tuple point to the next element, although the right element would already be in 'current'.  
	![for loop](img/p1_2.png)  
	Could fix this easily by modifying the for loop:

		for (int i = 0; i < index; i++) {
		
## Hypothesis 3 & 4: Tests fail because the 'get' method does not work properly.
* Verification:
 	In both cases the problem occurs when calling the 'get' method:
!['get' method problem](img/p3.png)
!['get' method problem2](img/p4.png)

* Explanation: 
	Both methods seem to work properly, but there is a problem in the 'get' method (as seen before in hypothesis 2).
		
## Hypothesis 5: The addAt method does not work properly.
(Hint: I corrected the problem in the 'get' method first, because else there's always a problem with this 'get' method)
* Verification:
	* the item 2 is put to the wrong position (pos. 3 instead of 2) in the linked list.
	![wrong position](img/p1_5_1.png)
	
* Explanation: 
	We can change the iteration in a way that the 'current' item is one item before the place where we want to insert
	a new item [for (int i = 0; i < index-1; i++)] and rewrite the bottom part of the method in the following way:

		newItem.next = current.next;
		current.next = newItem;
	
## Hypothesis 6: The 'remove' method does not work as it should.
* Verification:
	* We see that the method returns the wrong item (with value 3 instead of 2):
	![wrong item returned](img/p1_6.png)
	
*Explanation:
	The for-loop goes one element too far. We can easily fix that by adding a -1 to the loop:
	
	for(int i = 0; i < index-1; i++)
	
	#Our hypothesises on why tests fail.

## Hypothesis 7: There must be an error in the 'addAll' method
* Verification:
 	* The 'shouldAddCollectionAtIndex()' test method indicates an failure when calling the 'addAll' method:
 	![failure in the 'shouldAddCollectionAtindex' test](img/p1_7_1.png)
* Explanation: 
	* The counter does not increase in this loop. We can easily correct for that by writing 'counter++' instad of '++counter'
	(We cannot be sure if that is the only error though)
	![problem in the loop](img/p1_7_2.png)
	
## Hypothesis 8 & 9: Probably there is a problem in the 'next' method
* Verification:
	* The returned item is the current item instead of the next item (see T item = current.item)
	![returns current item instead of next](img/p1_8.png)
* Explanation:
	* I am not totally sure if that is the right explanation, but I think that we should rewrite the code as follows:
	T item = current.next.item
	
